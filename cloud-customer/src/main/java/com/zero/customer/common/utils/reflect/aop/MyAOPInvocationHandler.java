package com.zero.customer.common.utils.reflect.aop;import com.zero.customer.common.utils.reflect.other.AOPMethod;import com.zero.customer.common.utils.reflect.self.MyClassLoader;import com.zero.customer.common.utils.reflect.self.MyInvocationHandler;import com.zero.customer.common.utils.reflect.self.MyProxy;import java.lang.reflect.Method;/** * All rights Reserved, Designed By Suixingpay. * * @author: 张得钧<zhang_dj @ suixingpay.com> * @date: 2019-11-05 20:50 * @Copyright: 2019 Suixingpay. All rights reserved. * 注意：本内容仅限于随行付支付有限公司内部传阅，禁止外泄以及用于其他的商业用途。 */public class MyAOPInvocationHandler implements MyInvocationHandler {    private Object service;    private AOPMethod aopMethod;    public MyAOPInvocationHandler(Object service,AOPMethod aopMethod) {        this.service = service;        this.aopMethod = aopMethod;    }    public Object invoke(Object proxy, Method method, String  args) throws Throwable {        this.aopMethod.before(proxy, method,args);//执行前切入        Object result = method.invoke(service, args);        this.aopMethod.after(proxy, method,args);//执行后切入        System.out.println("");        return result;    }    public Object getProxy() {        return MyProxy.newProxyInstance(new MyClassLoader(),                service.getClass().getInterfaces(), this);    }}