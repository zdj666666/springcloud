package com.zero.customer.common.mybatis;import com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceBuilder;import com.zero.customer.enums.DBTypeEnum;import com.baomidou.mybatisplus.MybatisConfiguration;import com.baomidou.mybatisplus.entity.GlobalConfiguration;import com.baomidou.mybatisplus.plugins.PaginationInterceptor;import com.baomidou.mybatisplus.spring.MybatisSqlSessionFactoryBean;import com.baomidou.mybatisplus.toolkit.GlobalConfigUtils;import org.apache.ibatis.type.JdbcType;import org.mybatis.spring.boot.autoconfigure.MybatisProperties;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.context.annotation.Primary;import org.springframework.core.io.support.PathMatchingResourcePatternResolver;import org.springframework.core.io.support.ResourcePatternResolver;import org.springframework.util.ObjectUtils;import org.springframework.util.StringUtils;import javax.annotation.Resource;import javax.sql.DataSource;import java.util.HashMap;import java.util.Map;/** * All rights Reserved, Designed By Suixingpay. * * @author: 张得钧<zhang_dj @ suixingpay.com> * @date: 2019-11-24 13:55 * @Copyright: 2019 Suixingpay. All rights reserved. * 注意：本内容仅限于随行付支付有限公司内部传阅，禁止外泄以及用于其他的商业用途。 */@Configurationpublic class MybatisPlusConfig {    private static final Logger LOGGER = LoggerFactory.getLogger(MybatisPlusConfig.class);    @Resource    private MetaObjectHandlerConfig sysMetaObjectHandler;    @Resource    private MybatisProperties mybatisProperties;    /**     * mybatis-plus分页插件-设置分页类型为mysql和本地分页     */    @Bean    public PaginationInterceptor paginationInterceptor() {        LOGGER.info("加载PaginationInterceptor本地分页插件.");        PaginationInterceptor page = new PaginationInterceptor();        page.setLocalPage(true);        page.setDialectType("mysql");        return page;    }    /**     * 数据库主库     */    @Bean    @Primary    @ConfigurationProperties("spring.datasource.dynamic.datasource.master")    public DataSource masterDataSource(){        LOGGER.info("加载主数据源masterDataSource.");        return DruidDataSourceBuilder.create().build();    }    /**     * 数据库从库     */    @Bean    @ConfigurationProperties("spring.datasource.dynamic.datasource.slave1")    public DataSource slave1DataSource(){        LOGGER.info("加载从数据源slave1DataSource.");        return DruidDataSourceBuilder.create().build();    }    /**     * 动态数据源     */    @Bean    public DataSource myRoutingDataSource(@Qualifier("masterDataSource") DataSource masterDataSource,            @Qualifier("slave1DataSource") DataSource slave1DataSource) {        LOGGER.info("加载[masterDataSource-slave1DataSource]设置为动态数据源DynamicDataSource.");        Map<Object, Object> targetDataSources = new HashMap<>(2);        targetDataSources.put(DBTypeEnum.MASTER, masterDataSource);        targetDataSources.put(DBTypeEnum.SLAVE1, slave1DataSource);        DynamicDataSource dynamicDataSource = new DynamicDataSource();        dynamicDataSource.setDefaultTargetDataSource(masterDataSource);        dynamicDataSource.setTargetDataSources(targetDataSources);        LOGGER.info("测试能否插销该段代码！");        return dynamicDataSource;    }    /**     * 配置mybatis-plus的SqlSessionFactory     */    @Bean    public MybatisSqlSessionFactoryBean sqlSessionFactory(@Qualifier("masterDataSource") DataSource master,            @Qualifier("slave1DataSource") DataSource slave) throws Exception {        LOGGER.info("自定义配置mybatis-plus的SqlSessionFactory.");        MybatisSqlSessionFactoryBean mybatisPlus = new MybatisSqlSessionFactoryBean();        mybatisPlus.setDataSource(myRoutingDataSource(master, slave));        MybatisConfiguration configuration = new MybatisConfiguration();        configuration.setJdbcTypeForNull(JdbcType.NULL);        configuration.setMapUnderscoreToCamelCase(true);        configuration.setCacheEnabled(false);        ///自定义配置        mybatisPlus.setConfiguration(configuration);        GlobalConfiguration globalConfiguration = GlobalConfigUtils.defaults();        /////自定义填充策略接口实现        globalConfiguration.setMetaObjectHandler(sysMetaObjectHandler);        ////主键类型  0:"数据库ID自增", 1:"用户输入ID",2:"全局唯一ID (数字类型唯一ID)", 3:"全局唯一ID UUID";        globalConfiguration.setIdType(0);        /////字段策略 0:"忽略判断",1:"非 NULL 判断"),2:"非空判断"        globalConfiguration.setFieldStrategy(2);        ////驼峰下划线转换        globalConfiguration.setDbColumnUnderline(true);        ///自定义全局配置        mybatisPlus.setGlobalConfig(globalConfiguration);        if (StringUtils.hasLength(this.mybatisProperties.getTypeAliasesPackage())) {            mybatisPlus.setTypeAliasesPackage(this.mybatisProperties.getTypeAliasesPackage());        }        if (StringUtils.hasLength(this.mybatisProperties.getTypeHandlersPackage())) {            mybatisPlus.setTypeHandlersPackage(this.mybatisProperties.getTypeHandlersPackage());        }        if (!ObjectUtils.isEmpty(this.mybatisProperties.resolveMapperLocations())) {            mybatisPlus.setMapperLocations(this.mybatisProperties.resolveMapperLocations());        }        //// 设置mapper.xml文件的路径        ResourcePatternResolver resolver = new PathMatchingResourcePatternResolver();        org.springframework.core.io.Resource[] resource = resolver.getResources("classpath:mapper/*/*.xml");        mybatisPlus.setMapperLocations(resource);        //添加插件到SqlSessionFactory才能生效        return mybatisPlus;    }}