package com.zero.customer.common.utils.reflect.aop;import com.zero.customer.common.utils.reflect.other.AOPMethod;import com.zero.customer.common.utils.reflect.self.SingerService;import com.zero.customer.common.utils.reflect.self.SingerServiceImpl;import java.lang.reflect.Method;/** * All rights Reserved, Designed By Suixingpay. * * @author: 张得钧<zhang_dj @ suixingpay.com> * @date: 2019-11-05 20:51 * @Copyright: 2019 Suixingpay. All rights reserved. * 注意：本内容仅限于随行付支付有限公司内部传阅，禁止外泄以及用于其他的商业用途。 */public class TestAOPDynamicProxy {    public static void main(String args[]){        SingerService singerService = new SingerServiceImpl();        MyAOPInvocationHandler myAOPInvocationHandler =  new MyAOPInvocationHandler(singerService, new AOPMethod() {            public void before(Object proxy, Method method, String  args) {                System.out.println("将要执行方法名为" + method.getName() + "的方法");            }            public void after(Object proxy, Method method, String   args) {                System.out.println("已经执行完方法名为" + method.getName() + "的方法");            }        });        SingerService proxy = (SingerService)myAOPInvocationHandler.getProxy();        proxy.sing("刘德华");        proxy.dance("班课");    }}