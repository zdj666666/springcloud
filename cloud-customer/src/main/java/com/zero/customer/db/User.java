package com.zero.customer.db;import lombok.AllArgsConstructor;import lombok.Builder;import lombok.Data;import lombok.NoArgsConstructor;import org.apache.commons.lang3.StringUtils;import org.springframework.web.multipart.MultipartFile;import java.io.Serializable;import java.util.ArrayList;import java.util.Date;import java.util.List;/** * @description: * @author: 张得钧[zhang_dj@suixingpay.com] * @date: 2018/12/28 15:56 * @version: V1.0 */@Builder@AllArgsConstructor@NoArgsConstructor@Datapublic class User implements Serializable {    private static final long serialVersionUID = -7491215402569546437L;    //@GeneratedValue(strategy = GenerationType.IDENTITY)    private Integer uuid;    //用户名称    private String userName;    //用户密码    private String userPassword;    //用户电话    private String userPhone;    //用户账号    private String userAccount;    //用户性别    private String userSex;    //用户年纪    private String userAge;    //用户状态    private Integer userState;    private String userEmail;    //用户图片    private byte[] userImage;    //用户积分    private int userCreadits;    //创建时间    private Date createTime;    //修改时间    private Date updateTime;    //用户图片    @org.springframework.data.annotation.Transient    private MultipartFile userImg;    /*     * 重写euqals的意义:     *       1、equals是来源于Object(所有类的父类) 是直接进行地址值是否相等做的判断     *       2、重写equals方法先要重写hashcode方法，因为比较两个对象是否相等时，也要确保hash值的相等     * */    @Override //重写父类方法要加上该注解(用于区分重写方法)    public int hashCode() {        int result = uuid.hashCode();        result = result * 31 + userName.hashCode();        result = result * 31 + userPassword.hashCode();        return result;    }    @Override    public boolean equals(Object o){        //先校验传入参数是否为当前对象        if(!(o instanceof User)){            return false;        }        //比较地址是否相等        User user = (User)o;        if(this == user){        return true;        }      /*  boolean judge = false;        if(user.uuid != null  ){            judge = user.uuid.equals(this.uuid);        }        if(StringUtils.isNotBlank(user.userName)){            judge = user.userName.equals(this.uuid);        }        if(StringUtils.isNotBlank(user.userPassword)){            judge = user.userPassword.equals(this.userPassword);        }*/        //当user中的属性存在空时，会报空指针异常        if( user.uuid.equals(this.uuid) && user.userName.equals(this.userName) && user.userPassword.equals(this.userPassword)){            return true;        }else{            return false;        }    }    public static void main(String[] args) {        List<User> list = new ArrayList<>();        User user = new User();        user.setUuid(123);        user.setUserPassword("345");        user.setUserName("zdj");        list.add(user);        User user1 = new User();        user1.setUuid(123);        user1.setUserPassword("345");        user1.setUserName("zdj");        User user2 = new User();        user2.setUuid(123456);        user2.setUserPassword("34567");        user2.setUserName("zdj");        list.add(user2);        User user3 = new User();        user3.setUuid(12345);        user3.setUserPassword("345");        user3.setUserName("zdj");        list.add(user3);        boolean judge = list.contains(user1);        //boolean getJudge = user.equals(user1);        System.out.println("判断结果是:"+judge);    }}