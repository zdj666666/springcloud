buildscript {    repositories {        maven { url "http://172.16.60.188:8081/nexus/content/groups/public" }    }    ext {        springCloudVersion = 'Greenwich.RELEASE'        springBootVersion = '2.1.4.RELEASE'    }    dependencies {        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")        //classpath("com.suixingpay:call-hierarchy-gradle-plugin:${sxfCallHierarchyPluginVersion}")        classpath("gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:2.0.0")    }}subprojects {    apply plugin: 'maven'    apply plugin: 'java'    apply plugin: 'org.springframework.boot'    apply plugin: 'io.spring.dependency-management'    apply plugin: 'idea'    //apply plugin: "com.gorylenko.gradle-git-properties"//    gitProperties {//        keys = ['git.branch', 'git.closest.tag.commit.count', 'git.closest.tag.name', 'git.commit.id', 'git.commit.id.abbrev', 'git.commit.id.describe', 'git.commit.message.full', 'git.commit.message.short', 'git.commit.time', 'git.commit.user.email', 'git.commit.user.name', 'git.remote.origin.url', 'git.tags', 'git.total.commit.count']//    }    if (JavaVersion.current().isJava8Compatible()) {        allprojects {            tasks.withType(Javadoc) {                options.encoding = 'UTF-8'                options.addStringOption('Xdoclint:none', '-quiet') // 关闭JDK1.8的doclint特性            }        }    }    dependencyManagement {        imports {            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"        }    }    dependencyManagement {        resolutionStrategy {            // 检查远程依赖是否存在更新            cacheChangingModulesFor 0, 'seconds'            cacheChangingModulesFor 0, 'seconds' // 修改本地缓存策略        }    }    sourceCompatibility = JavaVersion.VERSION_1_8    targetCompatibility = JavaVersion.VERSION_1_8    springBoot  {        buildInfo ()    }    bootJar {        // 默认只打普通jar包        enabled = false    }//默认情况下，当`bootJar`或`bootWar`任务配置时，`jar`或者`war` 任务被禁用。通过启用`jar`或`war`任务，可以将项目配置为同时构建可执行jar或者war    jar {        enabled = true    }// 打包源代码，为了方便查看源码及调试，把源码也上传到nexus仓库中    task sourcesJar(type: Jar) {        classifier = 'sources'        from sourceSets.main.allSource    }// 打javadoc包，为了方便查看注释，需要把javadoc也上传到nexus仓库中    task javadocJar(type: Jar, dependsOn: javadoc) {        classifier = 'javadoc'        from javadoc.destinationDir    }    artifacts {        archives jar        archives sourcesJar        archives javadocJar    }    idea {        module {            downloadJavadoc = true            downloadSources = true        }    }    group = 'com.example'    version = '0.0.1-SNAPSHOT'    repositories {        maven { url "http://172.16.60.188:8081/nexus/content/groups/public" }    }//    uploadArchives {//        repositories {//            mavenDeployer {//                snapshotRepository("http://172.16.60.188:8081/nexus/content/repositories/snapshots/") {//                    authentication(userName: 'deployment', password: 'lemon888')//                }//                repository("http://172.16.60.188:8081/nexus/content/repositories/releases/") {//                    authentication(userName: 'deployment', password: 'lemon888')//                }//            }//        }//    }    dependencies {        compileOnly('org.springframework.boot:spring-boot-configuration-processor')        compileOnly('org.projectlombok:lombok')        testCompile('org.projectlombok:lombok')        testCompile "org.springframework.boot:spring-boot-starter-test"    }}